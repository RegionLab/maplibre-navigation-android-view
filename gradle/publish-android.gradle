apply plugin: 'maven-publish'
apply plugin: 'signing'

apply from: file("${rootDir}/gradle/artifact-settings.gradle")
apply from: file("${rootDir}/gradle/publish-root.gradle")

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.sourceFiles
    classpath = files(android.bootClasspath)
    failOnError = false
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.sourceFiles
}

tasks.withType(Javadoc) {
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('docencoding', 'UTF-8')
    options.addStringOption('charset', 'UTF-8')
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId project.ext.navigationArtifactGroupId
                version project.ext.versionName

                artifactId "${artifactId.replace("libandroid-", "")}-android"

                artifact tasks.androidJavadocsJar
                artifact tasks.androidSourcesJar

                pom {
                    name = project.ext.navigationArtifactTitle
                    description = project.ext.navigationArtifactTitle
                    url = project.ext.navigationArtifactUrl

                    licenses {
                        license {
                            name = project.ext.navigationArtifactLicenseName
                            url = project.ext.navigationArtifactLicenseUrl
                        }
                    }

                    developers {
                        developer {
                            id = project.ext.mapLibreDeveloperId
                            name = project.ext.mapLibreDeveloperName
                            email = project.ext.mapLibreDeveloperMail
                        }
                    }

                    scm {
                        connection = project.ext.navigationArtifactScmUrl
                        developerConnection = project.ext.navigationArtifactScmUrl
                        url = project.ext.navigationArtifactUrl
                    }
                }
            }
        }
    }

    android.libraryVariants.all { variant ->
        tasks.androidJavadocs.doFirst {
            classpath += files(variant.javaCompileProvider.get().classpath.files)
        }
    }
}

signing {
    required { project.ext["signing.keyId"] != null }
    sign publishing.publications
}